name: Python application

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to set up'
        required: true
        type: string
      requirements-path:
        description: 'Path to the requirements.txt file'
        required: true
        type: string
      test-path:
        description: 'Path to the test file or directory'
        required: true
        type: string
      dockerfile-path:
        description: 'Path to the Dockerfile'
        required: true
        type: string
      ecr-repo-name:
        description: 'AWS ECR repository name'
        required: true
        type: string
      ECR_REGISTRY:
        required: true
        type: string
        description: 'ECR_REGISTRY where image is stored'
      IMAGE_NAME:
        required: true
        type: string
        description: 'dokcer IMAGE_NAME'
      IMAGE_TAG:
        required: true
        type: string
        description: 'IMAGE_TAG'

    secrets:
      SNYK_TOKEN:
        description: 'Snyk token for vulnerability scanning'
        required: true
      AWS_ACCESS_KEY:
        description: 'AWS access key ID'
        required: true
      AWS_SECRET_KEY:
        description: 'AWS secret access key'
        required: true
      AWS_REGION:
        description: 'AWS region for ECR'
        required: true
      SONAR_TOKEN:
        description: 'sonar token for authentication'
        required: true
      SONAR_HOST_URL:
        description: 'sonarqube URL endpoint'
        required: true
jobs:
  # Lint Stage
  lint_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Test Stage
  py_test:
    runs-on: ubuntu-latest
    needs: lint_test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt

    - name: Test with pytest and generate coverage report
      run: |
        export PYTHONPATH=src
        pytest --cov=src --cov-report=xml --cov-report=html:coverage_report src/test/test.py

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage_report

  # Security Scan Stage
  Snyk_scan:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test
        args: --file=src --sarif-file-output=snyk-python.sarif

    - name: Upload Snyk Python report
      uses: actions/upload-artifact@v3
      with:
        name: snyk-python-report
        path: snyk-python.sarif

  # Sonar_scan:
  #   runs-on: ubuntu-latest
  #   needs: [lint_test,  py_test, Snyk_scan ]
  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v4
      

  #   - name: Install jq
  #     run: sudo apt-get update && sudo apt-get install -y jq


  #   - name: curl to server endpoint
  #     run: curl http://18.234.82.32:9000

  #   - name: SonarQube Scan
  #     uses: SonarSource/sonarqube-scan-action@v2.0.2
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #   - name: SonarQube Quality Gate check
  #     id: sonarqube-quality-gate-check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     timeout-minutes: 5
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Docker Build Stage
  docker_build:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test, Snyk_scan ]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        tags: appdev:latest
        load: true

    - name: Save Docker image as .tar file
      run: |
        docker save -o /tmp/docker-images.tar appdev:latest
  
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/docker-images.tar

    - name: List Docker images
      run: |
        docker images

  # Docker Security Scan Stage
  snyk_image_scan:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Scan Docker image with Snyk
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: appdev:latest
        args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk-docker.sarif

    - name: Upload Snyk Docker report
      uses: actions/upload-artifact@v3
      with:
        name: snyk-docker-report
        path: snyk-docker.sarif
  # Deployment Stage
  publish:
    runs-on: ubuntu-latest
    needs: snyk_image_scan
    steps:
    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Build and push Docker image
      run: |
        docker tag appdev:latest ${{ steps.login-pf-aws-ecr.outputs.registry }}/python:latest
        docker push ${{ steps.login-pf-aws-ecr.outputs.registry }}/python:latest

  # Post-Deployment Tasks Stagess
  Deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4


    - name: Configure credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up environment
      run: |
          chmod +x deploy.sh
          ./deploy.sh

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG_PROD }}
    - run: |
        kubectl apply -f manifest/deployment.yaml
        kubectl apply -f manifest/service.yaml
